cmake_minimum_required(VERSION 3.15)

project(MastersThesis)


#set(CMAKE_AUTORCC ON)

if (NOT (EXISTS ${CMAKE_SOURCE_DIR}/git_sha_files))
    file(MAKE_DIRECTORY "git_sha_files")
endif()

set(GIT_BRANCH "MASTER")
if (DEFINED "GIT_BRANCH")
    set(VERSION ${GIT_BRANCH})
    if ($ENV{CLION_IDE})
        message("Running in CLion")
        if (DEFINED "CLION_USING_CLANG")
            set(CMAKE_CXX_COMPILER "/usr/bin/clang++-7")
        else()
            set(CMAKE_CXX_COMPILER_ID "gcc")
        endif()
    elseif (WIN32)
        set(CMAKE_CXX_COMPILER_ID "MSVC")
        set(GIT_BRANCH "Windows")
        set(VERSION "Windows")
    else()
        set(CMAKE_CXX_COMPILER_ID "gcc")
    endif()
else()
    set(GIT_BRANCH "NOBRANCH")
    set(VERSION "NOVERSION")
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

message("Setting up mode ${CMAKE_BUILD_TYPE} for branch ${GIT_BRANCH} with version ${VERSION} and compiler ${CMAKE_CXX_COMPILER_ID} with C++${CMAKE_CXX_STANDARD}")
if (WIN32)
    set(CMAKE_CONFIGURATION_TYPES "Debug;Release;Test" CACHE STRING "" FORCE)

    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /WX /MP /EHsc -DVISUALIZATION -DREVEALING_STRINGS -D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_WINSOCK_DEPRECATED_NO_WARNINGS -DBOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE")
    set(CMAKE_CXX_FLAGS_DEBUG "/Zi /Od /Ob0 /MDd /RTC1 /bigobj -DDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "/Gy /GF /Oy /Oi /MD /bigobj -DNDEBUG")
    set(CMAKE_CXX_FLAGS_TEST "/Zi /Od /Ob0 /MDd /RTC1 /bigobj -DDEBUG -DEXTENDED_DEBUG -DCME_MDP_AUTOCERT -DCME_FIX_AUTOCERT -DTEST_MODE")

    set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO /SAFESEH:NO")

    set(LINK_TC_MALLOC 0)
else()
    set(CMAKE_CONFIGURATION_TYPES "Debug;Release;Profile;Test" CACHE STRING "" FORCE)

    set(CMAKE_CXX_TCMALLOC_FLAGS "-fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror -Wshadow -Wuninitialized -Winit-self -Wno-unknown-pragmas -Wno-deprecated-declarations -ftemplate-backtrace-limit=0")

    set(CMAKE_CXX_FLAGS_DEBUG "-O0 -fpic -g -DDEBUG -DVISUALIZATION -DREVEALING_STRINGS")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3 -fpic -fomit-frame-pointer -DNDEBUG -DQT_NO_DEBUG -DFILELOG_MAX_LEVEL=LogL::Info -DVISUALIZATION -DREVEALING_STRINGS")
    set(CMAKE_CXX_FLAGS_PROFILE "-O3 -fpic -g -DNDEBUG -DQT_NO_DEBUG -DVISUALIZATION -DREVEALING_STRINGS -DPROFILE")
    set(CMAKE_CXX_FLAGS_TEST "-O0 -fno-access-control -g -DDEBUG -DEXTENDED_DEBUG -DVISUALIZATION -DREVEALING_STRINGS -DCME_MDP_AUTOCERT -DCME_FIX_AUTOCERT -DTEST_MODE")
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

#### Build directory ####
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_SOURCE_DIR}/build_x64/Debug/bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_SOURCE_DIR}/build_x64/Release/bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_PROFILE "${CMAKE_SOURCE_DIR}/build_x64/Profile/bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_TEST "${CMAKE_SOURCE_DIR}/build_x64/Test/bin")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${CMAKE_SOURCE_DIR}/build_x64/Debug/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_EXTENDEDDEBUG "${CMAKE_SOURCE_DIR}/build_x64/ExtendedDebug/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_SOURCE_DIR}/build_x64/Release/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_PROFILE "${CMAKE_SOURCE_DIR}/build_x64/Profile/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_TEST "${CMAKE_SOURCE_DIR}/build_x64/Test/lib")

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_SOURCE_DIR}/build_x64/Debug/slib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_EXTENDEDDEBUG "${CMAKE_SOURCE_DIR}/build_x64/ExtendedDebug/slib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_SOURCE_DIR}/build_x64/Release/slib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_PROFILE "${CMAKE_SOURCE_DIR}/build_x64/Profile/slib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_TEST "${CMAKE_SOURCE_DIR}/build_x64/Test/slib")

#### Boost and Qt directories ####
if (WIN32)
    #    set(BOOST_ROOT "C:/Sys/boost_1_68_0")
    if (EXISTS "C:/Program Files/boost/boost_1_71_0")
        set(BOOST_ROOT "C:/Program Files/boost/boost_1_71_0")
    else()
        message( FATAL_ERROR "Boost not found" )
    endif()
else()
    set(CMAKE_PREFIX_PATH "/usr/local/Qt/5.7/gcc_64")
    if(EXISTS "/usr/local/boost_1_68_g++_8.1.0/")
        set(BOOST_ROOT "/usr/local/boost_1_68_g++_8.1.0/")
    else()
        message( FATAL_ERROR "Boost not found" )
    endif()
endif()

set(Boost_USE_STATIC_LIBS ON)
if (WIN32)
    find_package(Boost REQUIRED COMPONENTS system filesystem serialization iostreams thread date_time program_options unit_test_framework chrono regex bzip2 zlib)
    set(BOOST_STATIC_LIBRARIES ${Boost_LIBRARIES})
else()
    find_package(Boost REQUIRED COMPONENTS system filesystem serialization iostreams thread date_time program_options unit_test_framework chrono regex)
    find_package(ZLIB REQUIRED)
    find_package(BZip2 REQUIRED)
    set(BOOST_STATIC_LIBRARIES ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${BZIP2_LIBRARIES})
endif()
unset(Boost_LIBRARIES)
message( "Found boost at ${Boost_LIBRARY_DIRS}" )

### FFTMW3

# Root directory
include_directories("${CMAKE_SOURCE_DIR}")

#### Boost includes ####
if (Boost_FOUND)
    include_directories(SYSTEM ${Boost_INCLUDE_DIR})
    add_definitions( "-DHAS_BOOST" )
endif()

set(BUILDING_OTHER_PROJECTS true)

# Binary dir
include_directories("${PROJECT_BINARY_DIR}")

add_subdirectory(Test)

## Add all subdirectories
#MACRO(sub_dir_list result curdir)
#    FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
#    SET(dirlist "")
#    FOREACH(child ${children})
#        IF((IS_DIRECTORY "${curdir}/${child}") AND (EXISTS "${curdir}/${child}/CMakeLists.txt"))
#            LIST(APPEND dirlist ${child})
#        ENDIF()
#    ENDFOREACH()
#    SET(${result} ${dirlist})
#ENDMACRO()
#sub_dir_list(SUBDIRS ${CMAKE_SOURCE_DIR})
#FOREACH(subdir ${SUBDIRS})
#    if (NOT subdir STREQUAL Test)
#        add_subdirectory(${subdir})
#    endif()
#ENDFOREACH()
